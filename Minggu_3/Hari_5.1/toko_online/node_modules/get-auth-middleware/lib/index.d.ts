/// <reference types="node" />
import * as http from "http";
export declare type NextFunction = (error?: any | Error) => void;
export declare type MiddlewareCallback = (req: any, res: any, next: NextFunction) => Promise<void>;
export declare type OnGetCallback = (result: any, req: IHttpRequest) => void;
export declare type OnFailCallback = (error: any, req: IHttpRequest) => void;
export interface IHttpRequest extends http.IncomingMessage {
    auth: any;
}
export interface IAuthOptions {
    ignoredRoutes?: string[];
    authTypes: MiddlewareCallback[];
    onGet?: OnGetCallback;
    onFail?: OnFailCallback;
}
export interface IFirebaseAuthOptions extends Omit<IAuthOptions, 'authTypes'> {
    firebaseAuth: any;
    loadUserRecord?: boolean;
}
export interface ICustomAuthOptions extends Omit<IAuthOptions, 'authTypes'> {
    keys: string[];
}
export declare function getAuthMiddleware(options: IAuthOptions): MiddlewareCallback;
export declare function firebaseAuth(options: IFirebaseAuthOptions): MiddlewareCallback;
export declare function customKeysAuth(options: ICustomAuthOptions): MiddlewareCallback;
export declare function performSucess(auth: any, options: any, req: IHttpRequest, next: NextFunction): Promise<void>;
export declare function performFail(error: any, options: any, req: IHttpRequest, next: NextFunction): Promise<void>;
