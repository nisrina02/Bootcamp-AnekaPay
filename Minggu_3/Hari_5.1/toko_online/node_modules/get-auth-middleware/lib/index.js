"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function getAuthMiddleware(options) {
    if (!options.authTypes || options.authTypes.length === 0) {
        throw new Error('Not informed `authTypes`.');
    }
    return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        if (ignoredRoute(req, options, next)) {
            return;
        }
        const error = yield executeMiddleware(options.authTypes, 0, req, res);
        if (error) {
            performFail(error, options, req, next);
        }
        else {
            performSucess(req.auth, options, req, next);
        }
    });
}
exports.getAuthMiddleware = getAuthMiddleware;
function executeMiddleware(middlewares, index, req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        if (req.auth) {
            return;
        }
        return yield middlewares[index](req, res, (error) => __awaiter(this, void 0, void 0, function* () {
            if (error && error.error) {
                return error;
            }
            else if (index < middlewares.length - 1) {
                return yield executeMiddleware(middlewares, index + 1, req, res);
            }
            else {
                return error;
            }
        }));
    });
}
function firebaseAuth(options) {
    return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        const result = {};
        /// if do not have the authorization header entered, it will return null and move
        /// to the next authentication type
        if (!req.headers.authorization) {
            return yield performFail({ message: 'No autorization sent in header' }, options, req, next);
        }
        /// obtain authorization and verify that type is correct
        const authParts = req.headers.authorization.split(' ');
        if (authParts.length === 0 || authParts[0] !== 'Bearer') {
            return yield performFail({ error: 'Invalid autorization type' }, options, req, next);
        }
        try {
            /// get and save token
            result.token = authParts[1];
            /// get decoded id token with uid
            const decodedIdToken = yield options.firebaseAuth.verifyIdToken(result.token);
            result.decodedIdToken = decodedIdToken;
            /// get user record, if needed
            if (options.loadUserRecord) {
                result.firebaseUser = yield options.firebaseAuth.getUser(decodedIdToken.uid);
            }
        }
        catch (error) {
            return yield performFail({ error }, options, req, next);
        }
        /// successfully complete middleware
        return yield performSucess(result, options, req, next);
    });
}
exports.firebaseAuth = firebaseAuth;
function customKeysAuth(options) {
    return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        /// initialize object that contains auth keys
        const result = {};
        /// get request header authentication keys
        for (const key of options.keys) {
            /// if the key does not exist, it will be returned null and move on to the
            /// next authentication type; if you do not have a next authentication
            /// type, an error will be generated
            if (!req.headers[key]) {
                return performFail({ message: `No ${key} sent in header` }, options, req, next);
            }
            /// obter e salvar chave de autenticação
            result[normalizeName(key)] = req.headers[key];
        }
        /// successfully complete middleware
        return performSucess(result, options, req, next);
    });
}
exports.customKeysAuth = customKeysAuth;
function performSucess(auth, options, req, next) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options && options.onGet) {
            const result = yield options.onGet(auth, req);
            if (result) {
                auth = result;
            }
        }
        req.auth = auth;
        return next();
    });
}
exports.performSucess = performSucess;
function performFail(error, options, req, next) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options && options.onFail) {
            const result = yield options.onFail(error, req);
            if (result !== undefined) {
                error = result;
            }
            else {
                error = undefined;
            }
        }
        return next(error);
    });
}
exports.performFail = performFail;
function ignoredRoute(req, options, next) {
    if (options.ignoredRoutes && req.url && options.ignoredRoutes.indexOf(req.url) >= 0) {
        next();
        return true;
    }
    return false;
}
function normalizeName(name) {
    let underscore = name.indexOf('-') + 1;
    while (underscore > 0) {
        name = name.replace('-' + name.charAt(underscore), name.charAt(underscore).toUpperCase());
        underscore = name.indexOf('-') + 1;
    }
    return name;
}
